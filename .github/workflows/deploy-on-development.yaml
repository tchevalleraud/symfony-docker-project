name: Deploy on development server
on:
  push:
    branches:
      - develop
jobs:
  init:
    name: "Initialization"
    runs-on: [development]
    steps:
      - name: Check directory exist
        id: check-directory
        continue-on-error: true
        run: |
          cd ./dev/
          echo ::set-output name=exist::true
      - name: Update exist project
        if: steps.check-directory.outputs.exist == 'true'
        run: |
          cd ./dev/
          git checkout develop
          git add .
          git reset --hard
          git fetch origin --tags
          git pull
      - name: Deploy new project
        if: steps.check-directory.outputs.exist != 'true'
        run: |
          git clone git@github.com:tchevalleraud/symfony-docker-project.git
          mv symfony-docker-project/ dev/
          cd ./dev/
          git checkout develop
      - name: Update environment
        run: |
          rm -f ./dev/env/.env.dev.github
          touch ./dev/env/.env.dev.github
          echo "APP_SECRET=${{ secrets.DEV_APP_SECRET }}" >> ./dev/env/.env.dev.github
          echo "DOCKER_DATABASE_PASSWORD=${{ secrets.DEV_DOCKER_DATABASE_PASSWORD }}" >> ./dev/env/.env.dev.github
          echo "DOCKER_MINIO_SECRET=${{ secrets.DEV_DOCKER_MINIO_SECRET}}" >> ./dev/env/.env.dev.github
          cd ./dev/
          make env/dev
  build:
    name: "Build"
    needs: [init]
    runs-on: [development]
    steps:
      - name: Build docker image
        run: |
          cd ./dev/
          make docker/build
      - name: Build dependancies
        run: |
          cd ./dev/
          make composer/update
          make public/assets
      - name: Build swagger documentation
        run: |
          cd ./dev/
          make swagger
      - name: Build RSA Certificate
        run: |
          cd ./dev/
          make openssl/genrsa
  deploy:
    name: "Deployment"
    needs: [build]
    runs-on: [development]
    steps:
      - name: Start docker environment
        run: |
          cd ./dev/
          make docker/compose/up
      - name: Database deployment
        run: |
          cd ./dev/
          make doctrine/database/create
      - name: Init application
        run: |
          cd ./dev/
          make console app:system:init
      - name: Cache clear
        run: |
          cd ./dev/
          make cache/clear
  test-api:
    name: "Test API"
    needs: [build]
    runs-on: [development]
    steps:
      - name: Execute test
        run: |
          cd ./dev/
          make phpunit/testsuite API
  test-kernel:
    name: "Test Kernel"
    needs: [build]
    runs-on: [development]
    steps:
      - name: Execute test
        run: |
          cd ./dev/
          make phpunit/testsuite Kernel
  test-unit:
    name: "Test Unit"
    needs: [build]
    runs-on: [development]
    steps:
      - name: Execute test
        run: |
          cd ./dev/
          make phpunit/testsuite Unit
  test-web:
    name: "Test Web"
    needs: [build]
    runs-on: [development]
    steps:
      - name: Execute test
        run: |
          cd ./dev/
          make phpunit/testsuite Web
  test-codacy:
    name: Codacy
    needs: [test-api, test-kernel, test-unit, test-web]
    runs-on: [development]
    steps:
      - name: Generage coverage
        run: |
          cd ./dev/
          make phpunit/coverage
      - name: Upload coverage results to Codacy
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_TOKEN }}
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r dev/app/coverage.xml